{"version":3,"sources":["components/Wrapper/index.js","components/Card/index.js","App.js","index.js"],"names":["Wrapper","props","react_default","a","createElement","className","children","Card","alt","name","src","image","onClick","clickCard","id","App","state","cards","clickedArray","message","score","topscore","shuffledArray","_this","shuffleArray","setState","includes","shakeit","concat","topScore","cardsArray","i","length","j","Math","floor","random","_ref","_this2","this","class","components_Wrapper","map","card","components_Card","key","React","Component","ReactDOM","render","src_App","document","getElementById"],"mappings":"i+DASeA,MAJf,SAAiBC,GACf,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMK,uBCO1BC,MAVf,SAAcN,GACZ,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAKI,IAAKP,EAAMQ,KAAMC,IAAKT,EAAMU,MAAOC,QAAS,kBAAMX,EAAMY,UAAUZ,EAAMa,iBCiEtEC,6MAhEbC,MAAQ,CACNC,QACAC,aAAc,GACdC,QAAS,GACTC,MAAO,EACPC,SAAU,KAGZR,UAAY,SAAAC,GAEV,IAAMQ,EAAgBC,EAAKC,aAAaP,GACxCM,EAAKE,SAAS,CAAER,MAAOK,IAEnBC,EAAKP,MAAME,aAAaQ,SAASZ,GACnCS,EAAKE,SAAS,CAAEL,MAAO,EAAGF,aAAc,GAAIC,QAAS,mFAA0EQ,QAAS,SAGxIJ,EAAKE,SAAS,CACZP,aAAcK,EAAKP,MAAME,aAAaU,OAAO,CAACd,IAC9CM,MAAOG,EAAKP,MAAMI,MAAQ,EAC1BD,QAAS,2BAKTI,EAAKP,MAAMI,MAAQG,EAAKP,MAAMa,UAChCN,EAAKE,SAAS,CAAEI,SAAUN,EAAKP,MAAMI,WAIzCI,aAAe,SAACM,GACd,IAAK,IAAIC,EAAID,EAAWE,OAAS,EAAGD,EAAI,EAAGA,IAAK,CAC9C,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADIM,EAEb,CAACP,EAAWG,GAAIH,EAAWC,IAA3DD,EAAWC,GAFkCM,EAAA,GAE9BP,EAAWG,GAFmBI,EAAA,GAIhD,OAAOP,2EAGA,IAAAQ,EAAAC,KACP,OAEErC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKoC,MAAM,UACTtC,EAAAC,EAAAC,cAAA,KAAGC,UAAU,SAAQH,EAAAC,EAAAC,cAAA,wBAAgBmC,KAAKvB,MAAMI,MAA3B,gBAA+CmB,KAAKvB,MAAMa,YAEjF3B,EAAAC,EAAAC,cAAA,UAAQoC,MAAM,UACZtC,EAAAC,EAAAC,cAAA,sFACAF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,WAAUH,EAAAC,EAAAC,cAAA,cAASmC,KAAKvB,MAAMG,WAE7CjB,EAAAC,EAAAC,cAACqC,EAAD,KACGF,KAAKvB,MAAMC,MAAMyB,IAAI,SAAAC,GAAI,OACxBzC,EAAAC,EAAAC,cAACwC,EAAD,CACE/B,UAAWyB,EAAKzB,UAChBC,GAAI6B,EAAK7B,GACT+B,IAAKF,EAAK7B,GACVH,MAAOgC,EAAKhC,mBAzDRmC,IAAMC,iBCDxBC,IAASC,OAAO/C,EAAAC,EAAAC,cAAC8C,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.ce0fda60.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\n\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Card(props) {\n  return (\n    <div className=\"card\">\n      <div className=\"img-container\">\n        <img alt={props.name} src={props.image} onClick={() => props.clickCard(props.id)} />\n      </div>\n    </div>\n  );\n}\n\nexport default Card;\n","import React, { Component } from \"react\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport Card from \"./components/Card\";\nimport cards from \"./cards.json\";\n\nclass App extends React.Component {\n  // Setting this.state.friends to the friends json array\n  state = {\n    cards,\n    clickedArray: [],\n    message: \"\",\n    score: 0,\n    topscore: 0,\n  };\n\n  clickCard = id => {\n    // Arrange the cards randomly\n    const shuffledArray = this.shuffleArray(cards);\n    this.setState({ cards: shuffledArray });\n    // if clicked an image already clicked set this.state.score = 0; empty clickeadArray, end of if block\n    if (this.state.clickedArray.includes(id)) {\n      this.setState({ score: 0, clickedArray: [], message: \"You guessed incorrectly!!! Game Over ☹️ Click an image to start again!\", shakeit: \"true\" });\n    }\n    else {\n      this.setState({\n        clickedArray: this.state.clickedArray.concat([id]),\n        score: this.state.score + 1,\n        message: \"You guessed correctly!\",\n\n      });\n    }\n    // set topscore = score if score>topscore.\n    if (this.state.score > this.state.topScore) {\n      this.setState({ topScore: this.state.score });\n    }\n\n  }\n  shuffleArray = (cardsArray) => {\n    for (let i = cardsArray.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [cardsArray[i], cardsArray[j]] = [cardsArray[j], cardsArray[i]];\n    }\n    return cardsArray;\n  }\n  // Map over this.state.friends and render a FriendCard component for each friend object\n  render() {\n    return (\n\n      <div>\n        <nav class=\"navbar\">\n          <p className=\"score\"><strong>Score: {this.state.score} | TopScore: {this.state.topScore}</strong></p>\n        </nav>\n        <header class=\"header\">\n          <h2>Click on an image to earn points, but don't click on any more than once!</h2>\n          <p className=\"message\"><strong>{this.state.message}</strong></p>\n        </header>\n        <Wrapper>\n          {this.state.cards.map(card => (\n            <Card\n              clickCard={this.clickCard}\n              id={card.id}\n              key={card.id}\n              image={card.image}\n            />\n          ))}\n        </Wrapper>\n      </div >\n    );\n  }\n}\n\nexport default App;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}